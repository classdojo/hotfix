// Generated by CoffeeScript 1.4.0
(function() {
  var MESSAGE_DISPLAY_TIME, MIN_PAGE_REFRESH_INTERVAL, getDateNow, hotfix, lastUpdated, refreshPage, refreshTimeout, showMessage, sift, template;

  sift = require("sift");

  template = require("./template");

  hotfix = window.hotfix = {};

  MESSAGE_DISPLAY_TIME = 1000 * 3;

  MIN_PAGE_REFRESH_INTERVAL = typeof window.callPhantom !== "undefined" || window.debugHotfix ? 1000 : 1000 * 30;

  refreshTimeout = null;

  getDateNow = function() {
    if (!Date.now) {
      return new Date().valueOf();
    }
    return Date.now();
  };

  lastUpdated = Number(getDateNow());

  $(document).ready(function() {
    var $hfx, checkForUpdates, host;
    $hfx = $("#hotfix");
    host = $hfx.attr("data-host") || $hfx.attr("host") || "";
    checkForUpdates = function() {
      return $.ajax({
        type: "GET",
        url: ("" + host + "/hotfix/info.json?r=") + getDateNow(),
        dataType: "json",
        jsonp: true,
        success: function(resp) {
          var result;
          result = resp.result;
          if (result.updatedAt > lastUpdated) {
            lastUpdated = result.updatedAt;
            return refreshPage(result);
          }
        },
        error: function(err) {}
      });
    };
    setInterval(checkForUpdates, MIN_PAGE_REFRESH_INTERVAL);
    return checkForUpdates();
  });

  /*
   refreshes the page
  */


  refreshPage = function(payload) {
    var msg, reloadPage;
    if (hotfix.onDisplayMessage) {
      hotfix.onDisplayMessage(payload);
    }
    if (payload.filter) {
      if (sift(payload.filter, [window]).length === 0) {
        return;
      }
    }
    msg = showMessage(payload);
    reloadPage = function() {
      if (hotfix.onReloadPage) {
        hotfix.onReloadPage(payload);
      }
      return location.reload();
    };
    if (payload.critical) {
      return setTimeout(reloadPage, MESSAGE_DISPLAY_TIME);
    } else {
      msg.find(".hotfix-refresh-button").click(reloadPage);
      return msg.find(".hotfix-ignore-button").click(function() {
        return msg.animate({
          top: "-100px"
        });
      });
    }
  };

  /*
  */


  showMessage = function(data) {
    var msg;
    msg = $(template);
    msg.css({
      top: "-100px"
    });
    msg.find(".hotfix-message").text(data.message);
    if (data.critical) {
      msg.find(".hotfix-buttons").css({
        "display": "none"
      });
    }
    $(document.body).append(msg);
    msg.animate({
      top: "0px"
    });
    return msg;
  };

}).call(this);
